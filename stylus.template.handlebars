{
  // Default options
  'functions': true,
  'variableNameTransforms': ['underscored']
}

bgi_img_x1 = url('{{{spritesheet.escaped_image}}}')

.s-global
  background-image bgi_img_x1
  display: inline-block;
  background-repeat: no-repeat;

{{#block "sprites"}}
{{#each sprites}}
/* i.s-global.s-{{strings.name}} */
${{strings.name}} = {{px.x}} {{px.y}} {{px.offset_x}} {{px.offset_y}} {{px.width}} {{px.height}} {{px.total_width}} {{px.total_height}} '{{{escaped_image}}}' '{{name}}';
.s-{{strings.name}} {
  background-position: ${{strings.name}}[2] ${{strings.name}}[3];
  width: ${{strings.name}}[4];
  height: ${{strings.name}}[5];
}

{{/each}}
{{/block}}

{{#block "spritesheet"}}
${{spritesheet_info.strings.name_width}} = {{spritesheet.px.width}};
${{spritesheet_info.strings.name_height}} = {{spritesheet.px.height}};
${{spritesheet_info.strings.name_image}} = '{{{spritesheet.escaped_image}}}';
${{spritesheet_info.strings.name_sprites}} ={{#each sprites}} ${{strings.name}}{{/each}};
${{spritesheet_info.strings.name}} = {{spritesheet.px.width}} {{spritesheet.px.height}} '{{{spritesheet.escaped_image}}}' ${{spritesheet_info.strings.name_sprites}};
{{/block}}

{{#block "sprite-functions-comment"}}
{{#if options.functions}}
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  spriteWidth($icon_home)
}

.icon-email {
  sprite($icon_email)
}
*/
{{/if}}
{{/block}}

{{#block "sprite-functions"}}
{{#if options.functions}}
spriteWidth($sprite) {
  width: $sprite[4];
}

spriteHeight($sprite) {
  height: $sprite[5];
}

spritePosition($sprite) {
  background-position: $sprite[2] $sprite[3];
}

spriteImage($sprite) {
  background-image: url($sprite[8]);
}

sprite($sprite) {
  spriteImage($sprite)
  spritePosition($sprite)
  spriteWidth($sprite)
  spriteHeight($sprite)
}
{{/if}}
{{/block}}

{{#block "spritesheet-functions-comment"}}
{{#if options.functions}}
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of Stylus

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

sprites($spritesheet_sprites);
*/
{{/if}}
{{/block}}
{{#block "spritesheet-functions"}}
{{#if options.functions}}
sprites($sprites) {
  for $sprite in $sprites {
    $sprite_name = $sprite[9];
    .{$sprite_name} {
      sprite($sprite);
    }
  }
}
{{/if}}
{{/block}}
